x<-[1:6]
x<-1:6
x
class(x)
as.numeric(X)
as.numeric(x)
class(x)
as.character(x)
as.numeric(x)
class(x)
m<-matrix(nrow=2,ncol=3)
m
dim(m)
attribute(m)
atribute(m)
attributes(m)
m<-matrix(1:6,nrow=2,ncol=3)
m
m<-matrix(1:3,nrow=2,ncol=3)
m
x
dim(x)<-(2,3)
dim(x)<-c(2,30)
dim(x)<-c(2,3)
x
y<-6:11
cbind(x,y)
dim(y)<-c(2,3)
cbind(x,y)
rbind(x,y)
getwd()
find.package("devtool")
find.package("devtools")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(rtools)
library(devtools)
find_rtools()
library(swirl)
swirl
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq(5,10,length = 30)
my_seq <- seq(5,10,length = 30)
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava','http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages("vegan")
install.packages("sem")
library(sem)
data(Klein)
Klein$P[1:21]
Klein$X[1:21]
Klein$P.lag <- c(NA,Klein$P[1:21])
Klein$X.lag <- c(NA,Klein$X[1:21])
Wg
I(Wg+Wp)
Klein.eqn1 <- tsls( C ~ P + P.lag +I(Wg+Wp),
instruments =~G + T + Wg + I(Year - 1931) + K.lag + P.lag + X.lag,
data=Klein )
klein.Wg
klein$Wg
Klein$Wg
ent
rm(list = ls())
source("D:/my_R/My_matlab_R_adapter.R")
clc()
library(sem)
library(polycor)
data(CNES)
head(CNES) #
# Do heterogeneous correlation on the dataset
hetcor(CNES, ML=TRUE)
library(polycor)
install.packages(polycor)
install.packages("polycor")
library(polycor)
R.version()
R.Version()
install.packages('stats')
install.packages("stats")
install.packages("stats")
?pca
? pca
install.packages("vegan")
library('vegan')
? pca
raw <- matrix(c(1,2,2.5, 2.5, 1,0.5, 0, 1, 2, 4, 3, 1), nrow = 6)
colnames(raw) <- c("s1","s2")
rownames(raw) <- c("r1","r2","r3","r4","r5","r6")
o.pca <-pca(raw)
source('C:/Users/Wei-Ting/Dropbox/DataCoding/R_primers/R_files/TBP_PCA1.R')
install.packages("labdsv")
install.packages("labdsv")
library('labdsv')
o.pca <-pca(raw)
o.pca
? pca
E <- o.pca$sdec^2/o.pca$totdev
E
o.pca$sdec^2
o.pca$sdev
E <- o.pca$sdev^2/o.pca$totdev
E
plot(o.pca$scores[,1], o.pca$scores[,2], type="n", asp=1)
mames(sveg)
names(sveg)
install.packages("dave")
library('dave')
names("sveg")
names(sveg)
raw <- matrix(c(1,2,2.5, 2.5, 1,0.5, 0, 1, 2, 4, 3, 1), nrow = 6)
colnames(raw) <- c("s1","s2")
rownames(raw) <- c("r1","r2","r3","r4","r5","r6")
o.pca <-pca(raw)
library('labdsv') # for the pca function
library('dave')   # for the data set
o.pca <-pca(raw)
o.pca
getwd()
source('C:/Users/Wei-Ting/Dropbox/DataCoding/R_primers/R_files/set_path.R')
getwd()
plot(X,Y)
## simulated data
X <- 1:20
set.seed(12345)  # so every time we get the same Y
Y <-rnorm(20)
plot(X,Y)
E <- o.pca$sdec^2/o.pca$totdev
plot(o.pca$scores[,1], o.pca$scores[,2], type="n", asp=1)
plot(o.pca$scores[,1], o.pca$scores[,2])
plot(o.pca$scores[,1], o.pca$scores[,2], type="p", asp=1)
plot(o.pca$scores[,1], o.pca$scores[,2], type="p", asp=1, xlab = PC1)
plot(o.pca$scores[,1], o.pca$scores[,2], type="p", asp=1, xlab = 'PC1', ylab = 'PC2')
library(ggplot2)
## data
## simulated data
X <- 1:20
set.seed(12345)
Y <-rnorm(20)
## built-in data in ggplot2:
str(mpg) # see the strcture of this data frame
# Histogram :
hist(Y)
Yhist <- hist(Y)
data(mpg)
qplot(displ, hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(Y)
hist(Y)
## simulated data
X <- 1:200
set.seed(12345)
Y <-rnorm(200)
## built-in data in ggplot2:
str(mpg) # see the strcture of this data frame
# Histogram :
hist(Y)
Yhist <- hist(Y)
Yhist
Yhist$xname <- simulation
Yhist$xname <- 'simulation'
Yhist
plot(Yhist)
plot(Yhist) # plot again
qplot(Y)
qplot(Y)
ggplot(Y)
qplot(Y)
ggplot(Y)
X <- rep(c(1,2,3,4), each =50 )
qplot(Y,  fill = X)
qplot(Y)
qplot(Y,  binwidth = 0.5, fill = X)
qplot(Y,  binwidth = 50, fill = X)
qplot(Y,  binwidth = 50)
qplot(Y,  binwidth = 1)
qplot(Y,  binwidth = 2)
qplot(Y,  binwidth = 0.5)
I("blue")
qplot(Y,  binwidth = 0.5)
qplot(Y,
geom="histogram",
binwidth = 0.5,
main = "Histogram with gplot",
xlab = "Simulated data",
fill="blue")
qplot(Y,
geom="histogram",
binwidth = 0.5,
main = "Histogram with gplot",
xlab = "Simulated data",
fill=I("blue"),
col=I("red"),
alpha=I(.2))
qplot(Y,
geom="histogram",
binwidth = 0.5,
main = "Histogram with gplot",
xlab = "Simulated data",
fill=X,
col=I("red"),
alpha=I(.2))
qplot(Y,
geom="histogram",
binwidth = 0.5,
main = "Histogram with gplot",
xlab = "Simulated data",
fill=I("cornflowerblue"),
col=I("red"),
alpha=I(.2))
qplot(hwy, data = mpg, fill = drv)
str(mpg)
qplot(hwy, data = mpg, fill = drv)
#                                           r    c
qplot(hwy,	data	=	mpg,	facets	=	drv	~	.,	binwidth	=	2)
qplot(hwy,	data	=	mpg,	facets	=	drv	~	.,	binwidth	=	2)
qplot(hwy,	data	=	mpg,	facets	=	. ~ drv,	binwidth	=	2)
qplot(hwy, data = mpg, fill = year)
qplot(hwy, data = mpg, fill = I(year))
qplot(hwy, data = mpg, fill = displ)
qplot(hwy, data = mpg, fill = fl)
qplot(hwy,	data	=	mpg,	facets	=	drv	~	.,	binwidth	=	2)
library("coda", lib.loc="~/R/win-library/3.2")
detach("package:coda", unload=TRUE)
detach("package:labdsv", unload=TRUE)
o.pca <-pca(raw)
detach("package:dave", unload=TRUE)
o.pca <-pca(raw)
o.pca <-pca(raw)
xyplot(Life.Exp ~ Income | region,
data = state,
layout = c(4, 1))
state <- data.frame(state.x77,
region = state.region)
xyplot(Life.Exp ~ Income | region,
data = state,
layout = c(4, 1))
qplot(hwy, data = mpg)
gplot(hwy, data = mpg)
gplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, fill = drv)
qplot(mpg$hwy, fill = mpg$drv)
qplot(hwy, data = mpg, fill = drv)
qplot(mpg$hwy, fill = mpg$drv)
qplot(hwy, data = mpg, fill = drv)
hist()
hist(Y)
hist(Y,0.2)
hist(Y,c(-2, 1, 0, 1,2))
hist(Y,c(-3, -2, 1, 0, 1,2,3))
hist(Y,c(-3, -2, 1, 0, 1,2))
hist(Y,c( -2, 1, 0, 1,2))
hist(Y,c( -2, 1, 0, 1,2,3))
hist(Y)
hist(Y)
? mean
X<-rnorm(20)
X
runif(10)
X2<-runif(20)
hist(X)
hist(X2)
X<-rnorm(20)
X1 <- rnorm(100)
hist(X1)
set.seed(12345)
X1 <- rnorm(100)
hist(X1)
set.seed(12345)
X1 <- rnorm(100)
hist(X1)
set.seed(12345)
X2 <- runif(100)
hist(X2)
set.seed(12345)
X3 <- rbinom(100)
hist(X3)
set.seed(12345)
X1 <- rnorm(100)
hist(X1)
set.seed(12345)
X3 <- rbinom(100,1, 0.5)
hist(X3)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
raw <- matrix(c(1,2,2.5, 2.5, 1,0.5, 0, 1, 2, 4, 3, 1), nrow = 6)
colnames(raw) <- c("s1","s2")
rownames(raw) <- c("r1","r2","r3","r4","r5","r6")
str(raw)
raw
library('labdsv')
plot(raw$s1, raw$s2)
plot(raw$s1, raw$s2)
plot(raw[,1], raw[,2])
plot(o.pca$scores[,1], o.pca$scores[,2],
type="p",
asp=1,
xlab = 'PC1',
ylab = 'PC2')
o.pca
plot(raw[,1], raw[,2])
E <- o.pca$sdec^2/o.pca$totdev
E
E <- o.pca$sdec^2 / o.pca$totdev
E <- o.pca$sdec^2 / o.pca$totdev
o.pca$sdec^2 / o.pca$totdev
o.pca$sdec^2
o.pca$sdev^2
E <- o.pca$sdev^2 / o.pca$totdev
E
1 >=2
(1>=2)==F
(1>=2) == F
!((1>=2) == F)
!(1>=2)
1!=2
(1>=2)&T
(1>=2)|T
X <- seq(1,10)
X >= 5
Y <- matrix(seq(1,6),nrow = 3)
Y
Y >= 2
Y >= 3
all(Y>0)
all(Y>3)
all(X>0)
any(X>0)
any(X>3)
all(X > 3)
any(X > 3)
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
X <- 1
Y <- 2
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 && Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 && Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 1 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
if( X > 0 & Y >1 ){
message("good!")
message('X > 1 and Y > 1')
}
## simulated data
X <- 1:20
set.seed(12345)  # so every time we get the same Y
Y <-rnorm(20)
plot(X, Y)
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
abline(0,1)
abline(1,1)
abline(1,0)
abline(0,0)
text(0, 1, 'my text here')
text(0, 5, 'my text here')
text(5, 1, 'my text here')
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
abline(0,0)
text(5, 1, 'my text here')
abline(0, 1, col="darkblue", lty=5)
lty
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
abline(0,0, col="darkblue", lty=5)
text(5, 1, 'my text here')
qplot(Y)
qplot(X, Y)
## simulated data
X <- 1:20
set.seed(12345)  # so every time we get the same Y
Y <-rnorm(20)
plot(X, Y)
plot(X, Y,
type = "b",
main = "My Plot",
xlab = "X",
ylab ="simulation data")
abline(0,0, col="darkblue", lty=5)
text(5, 1, 'my text here')
qplot(X,Y)
qplot(displ,	hwy,	data	=	mpg,	color	=	drv)
qplot(displ,	hwy,	data	=	mpg,	facets	=	.	~	drv)
g <- ggplot(mpg, aes(displ,hwy ))
summary(g)
g <- ggplot(mpg, aes(displ,hwy ))
summary(g)
print(g)# not plot yet!
# First Plot with Point Layer
g + geom_point()
g + geom_point() + facet_grid(. ~ drv)
g + geom_point(pch =2) + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point(pch =19) + geom_smooth()
g + geom_point(pch = 19) + geom_smooth()
g + geom_point(pch = 1) + geom_smooth()
g + geom_point(pch = 16) + geom_smooth()
g + geom_point() + geom_smooth()
qplot(displ,	hwy,	data	=	mpg,	facets	=	.	~	drv, pch=1)
qplot(displ,	hwy,	data	=	mpg, geom(pch=1))
qplot(displ,	hwy,	data	=	mpg, geom(pch=3))
qplot(displ,	hwy,	data	=	mpg, geom(pch=4))
qplot(displ,	hwy,	data	=	mpg, geom(pch=2))
g <- ggplot(mpg, aes(displ,hwy ))
summary(g)
print(g)#
print(g)
g <- ggplot(mpg, aes(displ,hwy ))
summary(g)
print(g)# not plot yet!
g + geom_point()
rm(list =g)
g <- ggplot(mpg, aes(displ,hwy ))
summary(g)
print(g)#
g + geom_point()
g + geom_point() + facet_grid(. ~ drv)
g + geom_point()
g + geom_point() + facet_grid(. ~ drv)
g
g + geom_point()
g + geom_point() + facet_grid(. ~ drv)
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_smooth(method = "lm")
g + geom_smooth()
? stat_smooth
colors()
g + geom_point(color = "azure", size = 4, alpha = 1/2)# alpha is transparency
g + geom_point(color = "azure", size = 4, alpha = 1/4)# alpha is transparency
g + geom_point(color = "azure", size = 4, alpha = 3/4)# alpha is transparency
View(mpg)
color()
colors()
? colors
g + geom_point(color = "azure", size = 4, alpha = 3/4)# alpha is transparency
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(color = "skyblue", size = 4, alpha = 3/4)
g + geom_point(color = "skyblue", size = 4, alpha = 3/4)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point() + geom_smooth(method = "lm")
g + geom_point(color = "azure", size = 4, alpha = 3/4)# alpha is transparency
g + geom_point(color = "skyblue", size = 4, alpha = 3/4)# alpha is transparency
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
qplot(hwy, data = mpg)
X <- seq(1,10)
X >= 5
typeof(X)
typeof(X<=5)
ls <- 1
TRUE <-1
X <- 1
X
rm(list = ls())
